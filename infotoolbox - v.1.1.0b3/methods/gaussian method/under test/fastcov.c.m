#include <math.h>
#include <stdio.h>
#include <stdlib.h>
/* Needed for building mex file:                                           */
#include <mex.h>
#include <matrix.h>

/*
 *   Copyright (C) 2009 Cesare Magri
 *   Version: 1.0.0
 */

/*
 *-------
 * LICENSE
 * -------
 * This software is distributed free under the condition that:
 *
 * 1. it shall not be incorporated in software that is subsequently sold;
 *
 * 2. the authorship of the software shall be acknowledged and the following
 *    article shall be properly cited in any publication that uses results
 *    generated by the software:
 *
 *      Magri C, Whittingstall K, Singh V, Logothetis NK, Panzeri S: A
 *      toolbox for the fast information analysis of multiple-site LFP, EEG
 *      and spike train recordings. BMC Neuroscience 2009 10(1):81;
 *
 * 3.  this notice shall remain in place in each source file.
 *
 */

void mexFunction(int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
{

    double *R, *Nt, totNt;
    double *covPrs, *covPr, *diagCovPrs, *diagCovPr, *sumPrs, *sumPr;
    mwSize Nc, maxNt, Ns, *dims, NcSquare;
    mwIndex c1, c2, t, s;
    
    R     = mxGetPr(prhs[0]);
    Nt    = mxGetPr(prhs[1]);
    Nc    = *mxGetPr(prhs[2]);
    maxNt = *mxGetPr(prhs[3]);
    Ns    = *mxGetPr(prhs[4]);
    totNt = *mxGetPr(prhs[5]);
    
    NcSquare = Nc*Nc;
    
    dims = mxCalloc(3, sizeof(mwSize));
    dims[0] = Nc;
    dims[1] = Nc;
    dims[2] = Ns;
    
    plhs[0] = mxCreateNumericArray(3, dims, mxDOUBLE_CLASS, 0);
    covPrs = mxGetPr(plhs[0]);
    
    plhs[1] = mxCreateDoubleMatrix(Nc, Nc, mxREAL);
    covPr = mxGetPr(plhs[1]);
    
    plhs[2] = mxCreateDoubleMatrix(Ns, Nc, mxREAL);
    diagCovPrs = mxGetPr(plhs[2]);
    
    plhs[3] = mxCreateDoubleMatrix(Nc, 1, mxREAL);
    diagCovPr = mxGetPr(plhs[3]);
    
    sumPrs = mxCalloc(Nc*Ns, sizeof(double));
    sumPr  = mxCalloc(Nc   , sizeof(double));
    
    for(s=0; s<Ns; s++) {
        
        for(c1=0; c1<Nc; c1++) {

            for(c2=c1; c2<Nc; c2++) {

                for(t=0; t<Nt[s]; t++) {

                    covPrs[c1 + c2*Nc + s*NcSquare] += R[c1 + t*Nc + s*Nc*maxNt] * R[c2 + t*Nc + s*Nc*maxNt];
                    
                    if(c1==0) {
                        sumPrs[c2 + s*Nc] += R[c2 + t*Nc + s*Nc*maxNt];
                        sumPr[c2] += R[c2 + t*Nc + s*Nc*maxNt];
                    }
                }
                
                covPr[c1 + c2*Nc] += covPrs[c1 + c2*Nc + s*NcSquare];
                
                covPrs[c1 + c2*Nc + s*NcSquare] = covPrs[c1 + c2*Nc + s*NcSquare] - (sumPrs[c1 + s*Nc]*sumPrs[c2 + s*Nc]) / Nt[s];
                
                if(c2==c1)
                    diagCovPrs[s + c1*Ns] = covPrs[c1 + c2*Nc + s*NcSquare];
                else
                    covPrs[c2 + c1*Nc + s*NcSquare] = covPrs[c1 + c2*Nc + s*NcSquare];
                
                if(s==Ns-1) {
                    covPr[c1 + c2*Nc] = covPr[c1 + c2*Nc] - (sumPr[c1]*sumPr[c2]) / totNt;
                    
                    if (c1==c2)
                        diagCovPr[c1] = covPr[c1 + c2*Nc];
                    else
                        covPr[c2 + c1*Nc] = covPr[c1 + c2*Nc];
                }
            }
        }
    }
    
    mxFree(dims);
    mxFree(sumPrs);
    mxFree(sumPr);
    
}